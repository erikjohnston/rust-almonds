var searchIndex = {};
searchIndex['almonds'] = {"items":[[0,"","almonds","Almond is an implementation of the same concepts as Macaroons, but with\nmuch smaller binary serializations.",null,null],[3,"Almond","","A representation of a deserialized Almond.",null,null],[3,"Verifier","","The verifier takes an almond and checks if it satisfies a list of\npredicates.",null,null],[4,"AlmondParseError","","An error returned when we failed to parse a buffer as an almond.",null,null],[13,"InvalidAlmond","","The buffer did not contain a valid almond.",0,null],[13,"IncorrectHash","","The hash did not match the deserialized Almond.",0,null],[11,"create","","Create a new Almond with given generation and type.",1,null],[11,"parse_and_validate","","Parse a binary serialized Almond, and validate that the hashes match.",1,null],[11,"parse_base64_and_validate","","Parse a Base64 serialized Almond, and validate that the hashes match.",1,null],[11,"add_literal_caveat","","Add a new literal caveat.",1,{"inputs":[{"name":"almond"},{"name":"vec"}],"output":{"name":"self"}}],[11,"add_caveat","","Adds a caveat.",1,null],[11,"almond_type","","Get the type of the Almond",1,null],[11,"generation","","Get the generation of the Almond",1,{"inputs":[{"name":"almond"}],"output":{"name":"u8"}}],[11,"caveats","","Get the *current* caveats of the Almond",1,null],[11,"hash","","Get the *current* hash of the almond.",1,null],[11,"serialize_binary","","Serialize into a binary blob",1,{"inputs":[{"name":"almond"}],"output":{"name":"vec"}}],[11,"serialize_base64","","Serialize into Base64.",1,{"inputs":[{"name":"almond"}],"output":{"name":"string"}}],[11,"to_base64","","",1,{"inputs":[{"name":"almond"},{"name":"config"}],"output":{"name":"string"}}],[11,"fmt","","",0,{"inputs":[{"name":"almondparseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"almondparseerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",0,{"inputs":[{"name":"almondparseerror"}],"output":{"name":"str"}}],[11,"cause","","",0,{"inputs":[{"name":"almondparseerror"}],"output":{"name":"option"}}],[11,"new","","Create a new instance to verify the given caveat.",2,null],[11,"allow","","Allow all caveats with the given key, irrespective of their values.",2,null],[11,"satisfies","","Invokes `predicate` against the value of every caveat with the given\nkey. If `predicate` returns `true` then the caveat is accepted,\n`false` rejects the caveat.",2,null],[11,"satisfies_exact","","Compares `value` with the value of every caveat with the given key.\nIf they match then the caveat is accpeted, otherwise it is rejected.",2,null],[11,"verify","","Returns whether the almond satisfies the given conditions and whether\nall caveats have been accepted by at least one condition.",2,{"inputs":[{"name":"verifier"}],"output":{"name":"bool"}}],[17,"ALMOND_HASH_SEED","","The arbitrary 32 byte array used to seed the initial HMAC.",null,null]],"paths":[[4,"AlmondParseError"],[3,"Almond"],[3,"Verifier"]]};
initSearch(searchIndex);
